{"ast":null,"code":"var _jsxFileName = \"/Applications/Html/leha/Todo-list_React/src/components/TodoItem/TodoItem.tsx\",\n    _s = $RefreshSig$();\n\nimport classNames from 'classnames';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { TodoLoader } from '../TodoLoader/TodoLoader';\nimport { PressedButton } from '../../types/PressedButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const TodoItem = ({\n  todo,\n  todos,\n  removeTodo,\n  selectedId,\n  isAdding,\n  handleChange,\n  selectedTodo,\n  setSelectedTodo\n}) => {\n  _s();\n\n  const [doubleClick, setDoubleClick] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n  const newTodoField = useRef(null);\n  const {\n    title,\n    id,\n    completed\n  } = todo;\n  const isLoading = useMemo(() => selectedId.includes(id) || isAdding && id === 0, [isAdding, selectedId, id]);\n  const updateTodoTitle = useCallback(() => {\n    if (!newTitle) {\n      removeTodo(selectedTodo);\n      setDoubleClick(false);\n      return;\n    }\n\n    if (newTitle === todo.title) {\n      setDoubleClick(false);\n      return;\n    }\n\n    if (todos.find(element => element.title === newTitle)) {\n      setDoubleClick(false);\n      setSelectedTodo(0);\n    }\n\n    handleChange(selectedTodo, {\n      title: newTitle\n    });\n    setDoubleClick(false);\n    setNewTitle('');\n    setSelectedTodo(0);\n  }, [newTitle, selectedTodo, doubleClick]);\n\n  const todoTitleChange = event => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleDoubleClick = useCallback(() => {\n    setDoubleClick(true);\n    setSelectedTodo(id);\n    setNewTitle(todo.title);\n  }, [doubleClick]);\n\n  const handleBlur = () => {\n    updateTodoTitle();\n    setDoubleClick(false);\n  };\n\n  const handleKeyPress = event => {\n    if (event.key === PressedButton.Escape) {\n      setDoubleClick(false);\n    }\n\n    if (event.key === PressedButton.Enter) {\n      updateTodoTitle();\n    }\n  };\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [selectedTodo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames('todo', {\n      completed\n    }),\n    \"data-cy\": \"Todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"todo__status-label\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        className: \"todo__status\",\n        \"data-cy\": \"TodoStatus\",\n        checked: completed,\n        onChange: () => handleChange(id, {\n          completed: !completed\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), doubleClick && selectedTodo === id ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"TodoTitleField\",\n        type: \"text\",\n        ref: newTodoField,\n        className: \"todo__title-field\",\n        value: newTitle,\n        placeholder: \"Employ todo will be deleted\",\n        onChange: todoTitleChange,\n        onBlur: handleBlur,\n        onKeyDown: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        \"data-cy\": \"TodoTitle\",\n        className: \"todo__title\",\n        onDoubleClick: handleDoubleClick,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"todo__remove\",\n        \"data-cy\": \"TodoDeleteButton\",\n        onClick: () => {\n          removeTodo(id);\n        },\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), isLoading && /*#__PURE__*/_jsxDEV(TodoLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TodoItem, \"bqIBoT17Tyvu/YJJyLxAi+byA4Q=\");\n\n_c = TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["/Applications/Html/leha/Todo-list_React/src/components/TodoItem/TodoItem.tsx"],"names":["classNames","useCallback","useEffect","useMemo","useRef","useState","TodoLoader","PressedButton","TodoItem","todo","todos","removeTodo","selectedId","isAdding","handleChange","selectedTodo","setSelectedTodo","doubleClick","setDoubleClick","newTitle","setNewTitle","newTodoField","title","id","completed","isLoading","includes","updateTodoTitle","find","element","todoTitleChange","event","target","value","handleDoubleClick","handleBlur","handleKeyPress","key","Escape","Enter","current","focus","preventDefault"],"mappings":"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","sourcesContent":["import classNames from 'classnames';\nimport {\n  ChangeEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoLoader } from '../TodoLoader/TodoLoader';\nimport { PressedButton } from '../../types/PressedButton';\n\ntype Props = {\n  todo: Todo;\n  todos: Todo[];\n  removeTodo: (TodoId: number) => void;\n  selectedId: number[];\n  isAdding: boolean;\n  handleChange: (updateId: number, data: Partial<Todo>) => Promise<void>;\n  selectedTodo: number;\n  setSelectedTodo: (value: number) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  todos,\n  removeTodo,\n  selectedId,\n  isAdding,\n  handleChange,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [doubleClick, setDoubleClick] = useState(false);\n  const [newTitle, setNewTitle] = useState<string>('');\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  const { title, id, completed } = todo;\n\n  const isLoading = useMemo(() => selectedId.includes(id)\n  || (isAdding && id === 0), [isAdding, selectedId, id]);\n\n  const updateTodoTitle = useCallback(() => {\n    if (!newTitle) {\n      removeTodo(selectedTodo);\n      setDoubleClick(false);\n\n      return;\n    }\n\n    if (newTitle === todo.title) {\n      setDoubleClick(false);\n\n      return;\n    }\n\n    if (todos.find(element => element.title === newTitle)) {\n      setDoubleClick(false);\n      setSelectedTodo(0);\n    }\n\n    handleChange(selectedTodo, { title: newTitle });\n    setDoubleClick(false);\n    setNewTitle('');\n    setSelectedTodo(0);\n  }, [newTitle, selectedTodo, doubleClick]);\n\n  const todoTitleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleDoubleClick = useCallback(() => {\n    setDoubleClick(true);\n    setSelectedTodo(id);\n    setNewTitle(todo.title);\n  }, [doubleClick]);\n\n  const handleBlur = () => {\n    updateTodoTitle();\n    setDoubleClick(false);\n  };\n\n  const handleKeyPress = (event: { key: string; }) => {\n    if (event.key === PressedButton.Escape) {\n      setDoubleClick(false);\n    }\n\n    if (event.key === PressedButton.Enter) {\n      updateTodoTitle();\n    }\n  };\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div\n      className={classNames('todo', {\n        completed,\n      })}\n      data-cy=\"Todo\"\n      key={id}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          data-cy=\"TodoStatus\"\n          checked={completed}\n          onChange={() => handleChange(id, { completed: !completed })}\n        />\n      </label>\n      {doubleClick && selectedTodo === id\n        ? (\n          <form onSubmit={event => {\n            event.preventDefault();\n          }}\n          >\n            <input\n              data-cy=\"TodoTitleField\"\n              type=\"text\"\n              ref={newTodoField}\n              className=\"todo__title-field\"\n              value={newTitle}\n              placeholder=\"Employ todo will be deleted\"\n              onChange={todoTitleChange}\n              onBlur={handleBlur}\n              onKeyDown={handleKeyPress}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span\n              data-cy=\"TodoTitle\"\n              className=\"todo__title\"\n              onDoubleClick={handleDoubleClick}\n            >\n              {title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              data-cy=\"TodoDeleteButton\"\n              onClick={() => {\n                removeTodo(id);\n              }}\n            >\n              ×\n            </button>\n          </>\n        )}\n      {isLoading && (\n        <TodoLoader />\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}