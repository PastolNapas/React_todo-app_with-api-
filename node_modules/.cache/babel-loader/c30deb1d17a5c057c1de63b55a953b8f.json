{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api'; // returns a promise resolved after a given delay\n\nfunction wait(delay) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n} // To have autocompletion and avoid mistypes\n\n\nfunction request(url, method = 'GET', data = null) {\n  const options = {\n    method\n  };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8'\n    };\n  } // we wait for testing purpose to see loaders\n\n\n  return wait(300).then(() => fetch(BASE_URL + url, options)).then(response => {\n    if (!response.ok) {\n      throw new Error();\n    }\n\n    return response.json();\n  });\n}\n\nexport const client = {\n  get: url => request(url),\n  post: (url, data) => request(url, 'POST', data),\n  patch: (url, data) => request(url, 'PATCH', data),\n  delete: url => request(url, 'DELETE')\n};","map":{"version":3,"sources":["/Applications/Html/leha/Todo-list_React/src/utils/fetchClient.ts"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","get","post","patch","delete"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,mCAAjB,C,CAEA;;AACA,SAASC,IAAT,CAAcC,KAAd,EAA6B;AAC3B,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BC,IAAAA,UAAU,CAACD,OAAD,EAAUF,KAAV,CAAV;AACD,GAFM,CAAP;AAGD,C,CAED;;;AAGA,SAASI,OAAT,CACEC,GADF,EAEEC,MAAqB,GAAG,KAF1B,EAGEC,IAAS,GAAG,IAHd,EAIc;AACZ,QAAMC,OAAoB,GAAG;AAAEF,IAAAA;AAAF,GAA7B;;AAEA,MAAIC,IAAJ,EAAU;AACR;AACAC,IAAAA,OAAO,CAACC,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAf;AACAC,IAAAA,OAAO,CAACI,OAAR,GAAkB;AAChB,sBAAgB;AADA,KAAlB;AAGD,GATW,CAWZ;;;AACA,SAAOb,IAAI,CAAC,GAAD,CAAJ,CACJc,IADI,CACC,MAAMC,KAAK,CAAChB,QAAQ,GAAGO,GAAZ,EAAiBG,OAAjB,CADZ,EAEJK,IAFI,CAECE,QAAQ,IAAI;AAChB,QAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,EAAN;AACD;;AAED,WAAOF,QAAQ,CAACG,IAAT,EAAP;AACD,GARI,CAAP;AASD;;AAED,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAMf,GAAJ,IAAoBD,OAAO,CAAIC,GAAJ,CADZ;AAEpBgB,EAAAA,IAAI,EAAE,CAAIhB,GAAJ,EAAiBE,IAAjB,KAA+BH,OAAO,CAAIC,GAAJ,EAAS,MAAT,EAAiBE,IAAjB,CAFxB;AAGpBe,EAAAA,KAAK,EAAE,CAAIjB,GAAJ,EAAiBE,IAAjB,KAA+BH,OAAO,CAAIC,GAAJ,EAAS,OAAT,EAAkBE,IAAlB,CAHzB;AAIpBgB,EAAAA,MAAM,EAAGlB,GAAD,IAAiBD,OAAO,CAACC,GAAD,EAAM,QAAN;AAJZ,CAAf","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n"]},"metadata":{},"sourceType":"module"}