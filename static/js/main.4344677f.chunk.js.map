{"version":3,"sources":["utils/fetchClient.ts","types/Error.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","api/todos.ts","components/Header/Header.tsx","types/PressedButton.ts","components/TodoLoader/TodoLoader.tsx","components/TodoItem/TodoItem.tsx","types/Filter.ts","components/TodoList/TodoList.tsx","components/ErrorNotification/ErrorNotification.tsx","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorMessage","client","getUserByEmail","email","a","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","className","htmlFor","classNames","type","id","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","getTodos","userId","addTodo","title","completed","deleteTodo","todoId","updateTodo","property","PressedButton","Header","newTodoField","setTitle","handleAllCompleted","todos","isAdding","setIsAdding","setTodos","current","focus","newTodo","useCallback","trim","ErrorTitle","postTodo","prevTodos","NotAdd","data-cy","active","every","todo","aria-label","onClick","ref","TodoLoader","FilterType","TodoItem","removeTodo","selectedId","handleChange","selectedTodo","setSelectedTodo","doubleClick","setDoubleClick","newTitle","setNewTitle","useRef","isLoading","useMemo","includes","updateTodoTitle","find","element","handleDoubleClick","checked","onBlur","onKeyDown","key","Escape","Enter","onDoubleClick","TodoList","TransitionGroup","map","CSSTransition","timeout","Math","random","ErrorNotification","isError","setIsError","timer","clearTimeout","hidden","Footer","filterType","filterTypes","completedTodos","setSelectedId","todosLeft","filter","length","deleteCompletedTodos","all","catch","NotDelete","href","classnames","selected","All","Active","Completed","App","fileterType","setFilterType","toggle","setToggle","useContext","receivedTodos","getTodosFromServer","filteredTodos","TodoId","updateId","changeStatus","NotUpdate","newTodos","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.4344677f.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorMessage {\n  ErrorTitle = 'Title cannot be empty',\n  NotAdd = 'Unable to add a todo',\n  NotDelete = 'Unable to delete a todo',\n  NotUpdate = 'Unable to update a todo',\n}\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'is-loading': loading,\n          })}\n        >\n          <input\n            type=\"email\"\n            id=\"user-email\"\n            className={classNames('input', {\n              'is-danger': !needToRegister && errorMessage,\n            })}\n            placeholder=\"Enter your email\"\n            disabled={loading || needToRegister}\n            value={email}\n            required\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n        </div>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className={classNames('input', {\n                'is-danger': needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              disabled={loading}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodo = (title: string, userId: number) => {\n  return client.post<Todo>('/todos',\n    {\n      title,\n      userId,\n      completed: false,\n    });\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (\n  todoId: number, property: Partial<Todo>,\n): Promise<Todo> => {\n  return client.patch(`/todos/${todoId}`, property);\n};\n","import classNames from 'classnames';\nimport React, { FormEvent, useCallback, useEffect } from 'react';\nimport { addTodo } from '../../api/todos';\nimport { ErrorMessage } from '../../types/Error';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  newTodoField: React.RefObject<HTMLInputElement>;\n  setTitle: React.Dispatch<React.SetStateAction<string>>;\n  title: string;\n  handleAllCompleted: () => void;\n  todos: Todo[];\n  isAdding: boolean;\n  setIsAdding: React.Dispatch<React.SetStateAction<boolean>>;\n  user: User | null;\n  setErrorMessage: React.Dispatch<React.SetStateAction<string>>;\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n};\n\nexport const Header: React.FC<Props> = ({\n  newTodoField,\n  setTitle,\n  title,\n  handleAllCompleted,\n  todos,\n  isAdding,\n  setIsAdding,\n  user,\n  setErrorMessage,\n  setTodos,\n}) => {\n  const getValue = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(value);\n  };\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [isAdding]);\n\n  const newTodo = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    if (!title.trim() || !user) {\n      setErrorMessage(ErrorMessage.ErrorTitle);\n\n      return;\n    }\n\n    setIsAdding(true);\n\n    try {\n      const postTodo = await addTodo(title, user.id);\n\n      setTodos((prevTodos) => [...prevTodos, postTodo]);\n    } catch {\n      setErrorMessage(ErrorMessage.NotAdd);\n    }\n\n    setIsAdding(false);\n    setTitle('');\n  }, [title, user]);\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        data-cy=\"ToggleAllButton\"\n        type=\"button\"\n        className={\n          classNames(\n            'todoapp__toggle-all',\n            { active: todos.every(todo => todo.completed) },\n          )\n        }\n        aria-label=\"close\"\n        onClick={handleAllCompleted}\n      />\n\n      <form\n        onSubmit={newTodo}\n      >\n        <input\n          data-cy=\"NewTodoField\"\n          type=\"text\"\n          ref={newTodoField}\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={getValue}\n          disabled={isAdding}\n        />\n      </form>\n    </header>\n  );\n};\n","export enum PressedButton {\n  Escape = 'Escape',\n  Enter = 'Enter',\n}\n","import React from 'react';\n\nexport const TodoLoader: React.FC = () => (\n  <div\n    data-cy=\"TodoLoader\"\n    className=\"modal overlay is-active\"\n  >\n    <div className=\"modal-background has-background-white-ter\" />\n    <div className=\"loader\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport {\n  ChangeEvent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoLoader } from '../TodoLoader/TodoLoader';\nimport { PressedButton } from '../../types/PressedButton';\n\ntype Props = {\n  todo: Todo;\n  todos: Todo[];\n  removeTodo: (TodoId: number) => void;\n  selectedId: number[];\n  isAdding: boolean;\n  handleChange: (updateId: number, data: Partial<Todo>) => Promise<void>;\n  selectedTodo: number;\n  setSelectedTodo: (value: number) => void;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  todos,\n  removeTodo,\n  selectedId,\n  isAdding,\n  handleChange,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [doubleClick, setDoubleClick] = useState(false);\n  const [newTitle, setNewTitle] = useState<string>('');\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  const { title, id, completed } = todo;\n\n  const isLoading = useMemo(() => selectedId.includes(id)\n  || (isAdding && id === 0), [isAdding, selectedId, id]);\n\n  const updateTodoTitle = useCallback(() => {\n    if (!newTitle) {\n      removeTodo(selectedTodo);\n      setDoubleClick(false);\n\n      return;\n    }\n\n    if (newTitle === todo.title) {\n      setDoubleClick(false);\n\n      return;\n    }\n\n    if (todos.find(element => element.title === newTitle)) {\n      setDoubleClick(false);\n      setSelectedTodo(0);\n    }\n\n    handleChange(selectedTodo, { title: newTitle });\n    setDoubleClick(false);\n    setNewTitle('');\n    setSelectedTodo(0);\n  }, [newTitle, selectedTodo, doubleClick]);\n\n  const todoTitleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleDoubleClick = useCallback(() => {\n    setDoubleClick(true);\n    setSelectedTodo(id);\n    setNewTitle(todo.title);\n  }, [doubleClick]);\n\n  const handleBlur = () => {\n    updateTodoTitle();\n    setDoubleClick(false);\n  };\n\n  const handleKeyPress = (event: { key: string; }) => {\n    if (event.key === PressedButton.Escape) {\n      setDoubleClick(false);\n    }\n\n    if (event.key === PressedButton.Enter) {\n      updateTodoTitle();\n    }\n  };\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [selectedTodo]);\n\n  return (\n    <div\n      className={classNames('todo', {\n        completed,\n      })}\n      data-cy=\"Todo\"\n      key={id}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          data-cy=\"TodoStatus\"\n          checked={completed}\n          onChange={() => handleChange(id, { completed: !completed })}\n        />\n      </label>\n      {doubleClick && selectedTodo === id\n        ? (\n          <form onSubmit={event => {\n            event.preventDefault();\n          }}\n          >\n            <input\n              data-cy=\"TodoTitleField\"\n              type=\"text\"\n              ref={newTodoField}\n              className=\"todo__title-field\"\n              value={newTitle}\n              placeholder=\"Employ todo will be deleted\"\n              onChange={todoTitleChange}\n              onBlur={handleBlur}\n              onKeyDown={handleKeyPress}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span\n              data-cy=\"TodoTitle\"\n              className=\"todo__title\"\n              onDoubleClick={handleDoubleClick}\n            >\n              {title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              data-cy=\"TodoDeleteButton\"\n              onClick={() => {\n                removeTodo(id);\n              }}\n            >\n              ×\n            </button>\n          </>\n        )}\n      {isLoading && (\n        <TodoLoader />\n      )}\n    </div>\n  );\n};\n","export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nimport '../../styles/transistiongroup.scss';\n\ntype Props = {\n  todos: Todo[];\n  removeTodo: (TodoId: number) => void;\n  selectedId: number[];\n  isAdding: boolean;\n  title: string;\n  handleChange: (updateId: number, data: Partial<Todo>) => Promise<void>;\n  selectedTodo: number;\n  setSelectedTodo: (value: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  removeTodo,\n  selectedId,\n  isAdding,\n  title,\n  handleChange,\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n\n      <TransitionGroup>\n        {todos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              removeTodo={removeTodo}\n              selectedId={selectedId}\n              isAdding={isAdding}\n              handleChange={handleChange}\n              todos={todos}\n              selectedTodo={selectedTodo}\n              setSelectedTodo={setSelectedTodo}\n            />\n          </CSSTransition>\n        ))}\n\n        {isAdding && (\n          <CSSTransition\n            key={0}\n            timeout={300}\n            classNames=\"temp-item\"\n          >\n            <TodoItem\n              key={Math.random()}\n              todo={{\n                id: 0,\n                title,\n                completed: false,\n                userId: Math.random(),\n              }}\n              removeTodo={removeTodo}\n              selectedId={selectedId}\n              isAdding={isAdding}\n              handleChange={handleChange}\n              todos={todos}\n              selectedTodo={selectedTodo}\n              setSelectedTodo={setSelectedTodo}\n            />\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </section>\n  );\n};\n","import classNames from 'classnames';\nimport { useEffect, useState } from 'react';\n\ntype Props = {\n  errorMessage: string;\n  setErrorMessage: (arg: string) => void;\n};\n\nexport const ErrorNotification: React.FC<Props> = ({\n  errorMessage,\n  setErrorMessage,\n}) => {\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setErrorMessage(''), 3000);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [errorMessage, isError]);\n\n  return (\n    <div\n      className={classNames(\n        'notification',\n        'is-danger',\n        'is-light',\n        'has-text-weight-normal',\n        {\n          hidden: isError,\n        },\n      )}\n      data-cy=\"ErrorNotification\"\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={() => setIsError(true)}\n        aria-label=\"close\"\n      />\n      {errorMessage}\n    </div>\n  );\n};\n","import classnames from 'classnames';\nimport { useCallback, useMemo } from 'react';\nimport { deleteTodo } from '../../api/todos';\nimport { ErrorMessage } from '../../types/Error';\nimport { FilterType } from '../../types/Filter';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  filterType: FilterType | string;\n  filterTypes: (arg: FilterType) => void;\n  completedTodos: Todo[];\n  setSelectedId: React.Dispatch<React.SetStateAction<number[]>>;\n  selectedId: number[];\n  setErrorMessage: React.Dispatch<React.SetStateAction<string>>;\n  errorMessage: string;\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n};\n\nexport const Footer: React.FC<Props> = ({\n  todos,\n  filterType,\n  filterTypes,\n  completedTodos,\n  setSelectedId,\n  selectedId,\n  setErrorMessage,\n  errorMessage,\n  setTodos,\n}) => {\n  const todosLeft = useMemo(() => {\n    return todos.filter(todo => !todo.completed).length;\n  }, [todos]);\n\n  const deleteCompletedTodos = useCallback(async () => {\n    setSelectedId(completedTodos.map((todo => todo.id)));\n\n    await Promise.all(completedTodos.map(({ id }) => deleteTodo(id)))\n      .then(() => setTodos((prevTodos) => prevTodos\n        .filter(({ completed }) => !completed)))\n      .catch(() => {\n        setErrorMessage(ErrorMessage.NotDelete);\n        setSelectedId([]);\n      });\n\n    setSelectedId([]);\n  }, [todos, selectedId, errorMessage]);\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${todosLeft} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          data-cy=\"FilterLinkAll\"\n          href=\"#/\"\n          className={classnames(\n            'filter__link',\n            { selected: filterType === FilterType.All },\n          )}\n          onClick={() => filterTypes(FilterType.All)}\n        >\n          All\n        </a>\n\n        <a\n          data-cy=\"FilterLinkActive\"\n          href=\"#/active\"\n          className={classnames(\n            'filter__link',\n            { selected: filterType === FilterType.Active },\n          )}\n          onClick={() => filterTypes(FilterType.Active)}\n        >\n          Active\n        </a>\n        <a\n          data-cy=\"FilterLinkCompleted\"\n          href=\"#/completed\"\n          className={classnames(\n            'filter__link',\n            { selected: filterType === FilterType.Completed },\n          )}\n          onClick={() => filterTypes(FilterType.Completed)}\n        >\n          Completed\n        </a>\n      </nav>\n      <button\n        data-cy=\"ClearCompletedButton\"\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        onClick={deleteCompletedTodos}\n        disabled={!completedTodos}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { Header } from './components/Header/Header';\nimport { TodoList } from './components/TodoList';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { Footer } from './components/Footer';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/Filter';\nimport {\n  getTodos,\n  deleteTodo,\n  updateTodo,\n} from './api/todos';\nimport { ErrorMessage } from './types/Error';\n\nexport const App: React.FC = () => {\n  const newTodoField = useRef<HTMLInputElement>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [fileterType, setFilterType] = useState(FilterType.All);\n  const [title, setTitle] = useState('');\n  const [selectedId, setSelectedId] = useState<number[]>([]);\n  const [isAdding, setIsAdding] = useState(false);\n  const [toggle, setToggle] = useState(true);\n  const [selectedTodo, setSelectedTodo] = useState(0);\n  const user = useContext(AuthContext);\n\n  useEffect(() => {\n    const getTodosFromServer = async (userId: number) => {\n      try {\n        const receivedTodos = await getTodos(userId);\n\n        setTodos(receivedTodos);\n      } catch (error) {\n        setErrorMessage(`${error}`);\n      }\n    };\n\n    if (!user) {\n      return;\n    }\n\n    getTodosFromServer(user.id);\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return todos.filter(todo => {\n      switch (fileterType) {\n        case FilterType.Active:\n          return !todo.completed;\n        case FilterType.Completed:\n          return todo.completed;\n        default:\n          return true;\n      }\n    });\n  }, [todos, fileterType]);\n\n  const removeTodo = useCallback(async (TodoId: number) => {\n    setSelectedId([TodoId]);\n    try {\n      await deleteTodo(TodoId);\n\n      setTodos((prevTodos) => prevTodos.filter(({ id }) => id !== TodoId));\n    } catch {\n      setErrorMessage(ErrorMessage.NotDelete);\n    }\n  }, [todos, errorMessage]);\n\n  const completedTodos = useMemo(() => {\n    return todos.filter(todo => todo.completed);\n  }, [todos]);\n\n  const handleChange = useCallback(\n    async (updateId: number, data: Partial<Todo>) => {\n      setSelectedId([updateId]);\n\n      try {\n        const changeStatus: Todo = await updateTodo(updateId, data);\n\n        setTodos(prevTodos => prevTodos.map(todo => (\n          todo.id === updateId\n            ? changeStatus\n            : todo\n        )));\n      } catch {\n        setErrorMessage(ErrorMessage.NotUpdate);\n      }\n\n      setSelectedId([]);\n    }, [todos],\n  );\n\n  const handleAllCompleted = async () => {\n    if (completedTodos.length === todos.length) {\n      setSelectedId(todos.map(todo => todo.id));\n    } else {\n      setSelectedId(todos.filter(todo => !todo.completed)\n        .map(todo => todo.id));\n    }\n\n    try {\n      const newTodos = await Promise.all(todos.map(todo => (\n        todo.completed !== toggle\n          ? updateTodo(todo.id, { completed: toggle })\n          : todo\n      )));\n\n      setTodos(newTodos);\n    } catch {\n      setErrorMessage(ErrorMessage.NotUpdate);\n    }\n\n    setToggle(!toggle);\n    setSelectedId([]);\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          newTodoField={newTodoField}\n          setTitle={setTitle}\n          title={title}\n          setIsAdding={setIsAdding}\n          handleAllCompleted={handleAllCompleted}\n          todos={todos}\n          isAdding={isAdding}\n          user={user}\n          setErrorMessage={setErrorMessage}\n          setTodos={setTodos}\n        />\n        {(isAdding || todos.length > 0) && (\n          <>\n            <TodoList\n              todos={filteredTodos}\n              removeTodo={removeTodo}\n              selectedId={selectedId}\n              isAdding={isAdding}\n              title={title}\n              handleChange={handleChange}\n              selectedTodo={selectedTodo}\n              setSelectedTodo={setSelectedTodo}\n            />\n            <Footer\n              filterType={fileterType}\n              filterTypes={setFilterType}\n              todos={todos}\n              completedTodos={completedTodos}\n              setTodos={setTodos}\n              setErrorMessage={setErrorMessage}\n              errorMessage={errorMessage}\n              setSelectedId={setSelectedId}\n              selectedId={selectedId}\n            />\n          </>\n        )}\n      </div>\n      {errorMessage && (\n        <ErrorNotification\n          errorMessage={errorMessage}\n          setErrorMessage={setErrorMessage}\n        />\n      )}\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nconst Root = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}