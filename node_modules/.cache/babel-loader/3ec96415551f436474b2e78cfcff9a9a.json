{"ast":null,"code":"var _jsxFileName = \"/Applications/Html/leha/Todo-list_React/src/components/Header/Header.tsx\",\n    _s = $RefreshSig$();\n\nimport classNames from 'classnames';\nimport React, { useCallback, useEffect } from 'react';\nimport { addTodo } from '../../api/todos';\nimport { ErrorMessage } from '../../types/Error';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Header = ({\n  newTodoField,\n  setTitle,\n  title,\n  handleAllCompleted,\n  todos,\n  isAdding,\n  setIsAdding,\n  user,\n  setErrorMessage,\n  setTodos\n}) => {\n  _s();\n\n  const getValue = ({\n    target: {\n      value\n    }\n  }) => {\n    setTitle(value);\n  };\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [isAdding]);\n  const newTodo = useCallback(async event => {\n    event.preventDefault();\n\n    if (!title.trim() || !user) {\n      setErrorMessage(ErrorMessage.ErrorTitle);\n      return;\n    }\n\n    setIsAdding(true);\n\n    try {\n      const postTodo = await addTodo(title, user.id);\n      setTodos(prevTodos => [...prevTodos, postTodo]);\n    } catch {\n      setErrorMessage(ErrorMessage.NotAdd);\n    }\n\n    setIsAdding(false);\n    setTitle('');\n  }, [title, user]);\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"todoapp__header\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      \"data-cy\": \"ToggleAllButton\",\n      type: \"button\",\n      className: classNames('todoapp__toggle-all', {\n        active: todos.every(todo => todo.completed)\n      }),\n      \"aria-label\": \"close\",\n      onClick: handleAllCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: newTodo,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-cy\": \"NewTodoField\",\n        type: \"text\",\n        ref: newTodoField,\n        className: \"todoapp__new-todo\",\n        placeholder: \"What needs to be done?\",\n        value: title,\n        onChange: getValue,\n        disabled: isAdding\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"Hf8mPc4oujSDrwNkCTH4lTTBrds=\");\n\n_c = Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Applications/Html/leha/Todo-list_React/src/components/Header/Header.tsx"],"names":["classNames","React","useCallback","useEffect","addTodo","ErrorMessage","Header","newTodoField","setTitle","title","handleAllCompleted","todos","isAdding","setIsAdding","user","setErrorMessage","setTodos","getValue","target","value","current","focus","newTodo","event","preventDefault","trim","ErrorTitle","postTodo","id","prevTodos","NotAdd","active","every","todo","completed"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,IAA2BC,WAA3B,EAAwCC,SAAxC,QAAyD,OAAzD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AAiBA,OAAO,MAAMC,MAAuB,GAAG,CAAC;AACtCC,EAAAA,YADsC;AAEtCC,EAAAA,QAFsC;AAGtCC,EAAAA,KAHsC;AAItCC,EAAAA,kBAJsC;AAKtCC,EAAAA,KALsC;AAMtCC,EAAAA,QANsC;AAOtCC,EAAAA,WAPsC;AAQtCC,EAAAA,IARsC;AAStCC,EAAAA,eATsC;AAUtCC,EAAAA;AAVsC,CAAD,KAWjC;AAAA;;AACJ,QAAMC,QAAQ,GAAG,CAAC;AAChBC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AADQ,GAAD,KAE0B;AACzCX,IAAAA,QAAQ,CAACW,KAAD,CAAR;AACD,GAJD;;AAMAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,YAAY,CAACa,OAAjB,EAA0B;AACxBb,MAAAA,YAAY,CAACa,OAAb,CAAqBC,KAArB;AACD;AACF,GAJQ,EAIN,CAACT,QAAD,CAJM,CAAT;AAMA,QAAMU,OAAO,GAAGpB,WAAW,CAAC,MAAOqB,KAAP,IAA4B;AACtDA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAI,CAACf,KAAK,CAACgB,IAAN,EAAD,IAAiB,CAACX,IAAtB,EAA4B;AAC1BC,MAAAA,eAAe,CAACV,YAAY,CAACqB,UAAd,CAAf;AAEA;AACD;;AAEDb,IAAAA,WAAW,CAAC,IAAD,CAAX;;AAEA,QAAI;AACF,YAAMc,QAAQ,GAAG,MAAMvB,OAAO,CAACK,KAAD,EAAQK,IAAI,CAACc,EAAb,CAA9B;AAEAZ,MAAAA,QAAQ,CAAEa,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAeF,QAAf,CAAhB,CAAR;AACD,KAJD,CAIE,MAAM;AACNZ,MAAAA,eAAe,CAACV,YAAY,CAACyB,MAAd,CAAf;AACD;;AAEDjB,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAL,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GApB0B,EAoBxB,CAACC,KAAD,EAAQK,IAAR,CApBwB,CAA3B;AAsBA,sBACE;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAA,4BACE;AACE,iBAAQ,iBADV;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,SAAS,EACPd,UAAU,CACR,qBADQ,EAER;AAAE+B,QAAAA,MAAM,EAAEpB,KAAK,CAACqB,KAAN,CAAYC,IAAI,IAAIA,IAAI,CAACC,SAAzB;AAAV,OAFQ,CAJd;AASE,oBAAW,OATb;AAUE,MAAA,OAAO,EAAExB;AAVX;AAAA;AAAA;AAAA;AAAA,YADF,eAcE;AACE,MAAA,QAAQ,EAAEY,OADZ;AAAA,6BAGE;AACE,mBAAQ,cADV;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,GAAG,EAAEf,YAHP;AAIE,QAAA,SAAS,EAAC,mBAJZ;AAKE,QAAA,WAAW,EAAC,wBALd;AAME,QAAA,KAAK,EAAEE,KANT;AAOE,QAAA,QAAQ,EAAEQ,QAPZ;AAQE,QAAA,QAAQ,EAAEL;AARZ;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CA7EM;;GAAMN,M;;KAAAA,M","sourcesContent":["import classNames from 'classnames';\nimport React, { FormEvent, useCallback, useEffect } from 'react';\nimport { addTodo } from '../../api/todos';\nimport { ErrorMessage } from '../../types/Error';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  newTodoField: React.RefObject<HTMLInputElement>;\n  setTitle: React.Dispatch<React.SetStateAction<string>>;\n  title: string;\n  handleAllCompleted: () => void;\n  todos: Todo[];\n  isAdding: boolean;\n  setIsAdding: React.Dispatch<React.SetStateAction<boolean>>;\n  user: User | null;\n  setErrorMessage: React.Dispatch<React.SetStateAction<string>>;\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n};\n\nexport const Header: React.FC<Props> = ({\n  newTodoField,\n  setTitle,\n  title,\n  handleAllCompleted,\n  todos,\n  isAdding,\n  setIsAdding,\n  user,\n  setErrorMessage,\n  setTodos,\n}) => {\n  const getValue = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(value);\n  };\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [isAdding]);\n\n  const newTodo = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    if (!title.trim() || !user) {\n      setErrorMessage(ErrorMessage.ErrorTitle);\n\n      return;\n    }\n\n    setIsAdding(true);\n\n    try {\n      const postTodo = await addTodo(title, user.id);\n\n      setTodos((prevTodos) => [...prevTodos, postTodo]);\n    } catch {\n      setErrorMessage(ErrorMessage.NotAdd);\n    }\n\n    setIsAdding(false);\n    setTitle('');\n  }, [title, user]);\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        data-cy=\"ToggleAllButton\"\n        type=\"button\"\n        className={\n          classNames(\n            'todoapp__toggle-all',\n            { active: todos.every(todo => todo.completed) },\n          )\n        }\n        aria-label=\"close\"\n        onClick={handleAllCompleted}\n      />\n\n      <form\n        onSubmit={newTodo}\n      >\n        <input\n          data-cy=\"NewTodoField\"\n          type=\"text\"\n          ref={newTodoField}\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={getValue}\n          disabled={isAdding}\n        />\n      </form>\n    </header>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}